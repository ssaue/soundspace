// sspDefines.h

#ifndef SSP_DEFINES_H
#define SSP_DEFINES_H 1

#include <string>
#include <vector>
#include <fstream>

typedef __int64 sspInt64; 
typedef std::wstring sspString;
typedef std::vector<int> sspIntVec;
typedef std::vector<sspString> sspStrVec;

typedef std::wifstream sspInStream;
typedef std::wofstream sspOutStream;

/************************************************************************
**
** Constant declarations
**
*************************************************************************/

enum {SSP_NAMELENGTH = 80};
enum {USE_SEND_PARAMETER = -1};

enum SSP_CLASSES {SSP_CLASS_VALUE, SSP_CLASS_CONDITIONAL, SSP_CLASS_STRING, SSP_CLASS_PLAYOBJECT, SSP_CLASS_TASK, 
  SSP_CLASS_STREAM, SSP_CLASS_INPUT};

enum SSP_MESSAGES {SSP_LOAD_EVENT, SSP_SOLO, SSP_MUTE, SSP_UNSOLO, SSP_UNMUTE, SSP_START, SSP_STOP,
	SSP_SET_VOLUME, SSP_ADJUST_VOLUME, SSP_NO_MESSAGE, SSP_IS_DONE};

enum SSP_VALUES {SSP_VALUE_SINGLE, SSP_VALUE_INPUT_RANGE, SSP_VALUE_CLOCK, SSP_VALUE_DATE, 
	SSP_VALUE_MAP, SSP_VALUE_SUM, SSP_VALUE_PRODUCT, SSP_VALUE_CONDITIONAL, SSP_VALUE_RANDOM,
	SSP_VALUE_SECONDSRUN};

enum SSP_STRINGS {SSP_SIMPLE_STRING, SSP_ALPHABET_STRING, SSP_CONCAT_STRING};

enum SSP_CONDITIONALS {SSP_COND_BOOLEAN, SSP_COND_RELATION, SSP_COND_RANGE, SSP_COND_TIME_INTERVAL, 
	SSP_COND_TIME_RELATION, SSP_COND_MINUTE_RELATION, SSP_COND_DATE_INTERVAL, SSP_COND_PLAYING,
	SSP_COND_AND, SSP_COND_OR, SSP_COND_NOT, SSP_COND_DAYOFWEEK, SSP_COND_TRIGGER};

enum SSP_PLAYOBJECTS {SSP_PLAY_AUDIO_FILE, SSP_PLAY_MIDI_FILE, SSP_PLAY_DS_FILE, SSP_PLAY_DMX_FILE,
	SSP_PLAY_MIDI_LIST, SSP_PLAY_SILENCE, SSP_PLAY_SIMULTANEOUS, SSP_PLAY_SEQUENTIAL, 
	SSP_PLAY_LINEAR_SELECT, SSP_PLAY_RANDOM, SSP_PLAY_CHAIN, SSP_PLAY_CONDITIONAL, SSP_PLAY_DISTRIBUTION, 
  SSP_PLAY_STATE};

enum SSP_INPUTS {SSP_ICPCON_ANALOG, SSP_ICPCON_DIGITAL, SSP_PARALLEL, SSP_MIDIIN_EVENT};

enum SSP_STREAMS {SSP_STREAM_TIME, SSP_STREAM_TASK, SSP_STREAM_AUDIO};

// Enumeration of devices
enum SSP_DEVICES {SSP_DEVICE_MIDIIN, SSP_DEVICE_MIDIOUT, SSP_DEVICE_DIRECTSOUND, SSP_DEVICE_WAV,
	SSP_DEVICE_DMX, SSP_DEVICE_COUNT};

// Enumeration of watchdog cards
enum SSP_WATCHDOGS {SSP_WATCHDOG_BBISA, SSP_WATCHDOG_BBPCI, SSP_WATCHDOG_DECISION, SSP_WATCHDOG_IB780, SSP_WATCHDOG_COUNT};

// Enumerated error messages
enum tErrorNumber {SSP_ERROR_NONE, SSP_ERROR_DEVICE, SSP_ERROR_INPUT, SSP_ERROR_OBJECTS};

// Enumerated procedures for end of play
enum tShutdownProc{SSP_EMPTY_RUN, SSP_EMPTY_STOP, SSP_EMPTY_EXIT};

// Enumerated procedures for startup
enum tStartupProc {SSP_START_NOTHING, SSP_START_INITIALIZE, SSP_START_PLAY};

#endif
